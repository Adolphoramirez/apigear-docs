(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{288:function(e,t,a){"use strict";a.r(t);var i=a(10),s=Object(i.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"wamp-mapping"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#wamp-mapping"}},[e._v("#")]),e._v(" WAMP Mapping")]),e._v(" "),a("p",[e._v("WAMP is a bidirectional websocket based protocol which works nicely with ObjectAPIs communication patterns. The mapping describes here uses WAMP as a client/service form.")]),e._v(" "),a("p",[e._v("WAMP is described in terms of call/response and publish/subscribe patterns. Where operations typically take the call/response part and state and signals take the publish/subscribe part.")]),e._v(" "),a("p",[a("note",[e._v("In general all calls uses parameter arrays in the order they appear in the API description. Only state related calls use key-value maps to support partial state updates.")])],1),e._v(" "),a("h2",{attrs:{id:"client-side-mapping"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#client-side-mapping"}},[e._v("#")]),e._v(" Client Side Mapping")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("module")]),e._v(": Is a namespace and does not map directly.")]),e._v(" "),a("li",[a("strong",[e._v("interface")]),e._v(":\n"),a("ul",[a("li",[e._v("CALL: "),a("code",[e._v("${module}.${interface}._get")]),e._v(" - return state of the interface")]),e._v(" "),a("li",[e._v("CALL: "),a("code",[e._v("${module}.${interface}._set")]),e._v(" - sets the state of the interface")]),e._v(" "),a("li",[e._v("SUBSCRIBE: "),a("code",[e._v("${module}.${interface}")]),e._v(" - subscribes to interface state changes")])])]),e._v(" "),a("li",[a("strong",[e._v("operation")]),e._v(":\n"),a("ul",[a("li",[e._v("CALL: "),a("code",[e._v("${module}.${interface}.${operation}")]),e._v(" - invokes the operation")])])]),e._v(" "),a("li",[a("strong",[e._v("signal")]),e._v(" "),a("ul",[a("li",[e._v("SUBSCRIBE: "),a("code",[e._v("${module}.${interface}.${signal}")]),e._v(" - subscribes to signal events")])])])]),e._v(" "),a("p",[e._v("Structures are mapped like the normal JSON mapping of ObjectAPI data types. Same applies to enumerations.")]),e._v(" "),a("h3",{attrs:{id:"service-side-mapping"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#service-side-mapping"}},[e._v("#")]),e._v(" Service Side Mapping")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("module")]),e._v(": Is a namespace and does not map directly.")]),e._v(" "),a("li",[a("strong",[e._v("interface")]),e._v(":\n"),a("ul",[a("li",[e._v("REGISTER: "),a("code",[e._v("${module}.${interface}._get")]),e._v(" - to provide state of the interface")]),e._v(" "),a("li",[e._v("REGISTER: "),a("code",[e._v("${module}.${interface}._set")]),e._v(" - to set the state of the interface")]),e._v(" "),a("li",[e._v("PUBLISH: "),a("code",[e._v("${module}.${interface}")]),e._v(" - to notify clients about state changes")])])]),e._v(" "),a("li",[a("strong",[e._v("operation")]),e._v(":\n"),a("ul",[a("li",[e._v("REGISTER: "),a("code",[e._v("${module}.${interface}.${operation}")]),e._v(" - to register interface operation")])])]),e._v(" "),a("li",[a("strong",[e._v("signal")]),e._v(" "),a("ul",[a("li",[e._v("PUBLISH: "),a("code",[e._v("${module}.${interface}.${signal}")]),e._v(" - to publish interface signal")])])])])])}),[],!1,null,null,null);t.default=s.exports}}]);