"use strict";(self.webpackChunkapigear=self.webpackChunkapigear||[]).push([[1487],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(n),f=i,m=u["".concat(c,".").concat(f)]||u[f]||p[f]||o;return n?r.createElement(m,a(a({ref:t},d),{},{components:n})):r.createElement(m,a({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4284:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const o={sidebar_position:1},a="Introduction",s={unversionedId:"advanced/objectapi/intro",id:"advanced/objectapi/intro",title:"Introduction",description:"ObjectAPI is an interface specification to describe the boundaries of your software modules in an object format.",source:"@site/docs/advanced/objectapi/intro.md",sourceDirName:"advanced/objectapi",slug:"/advanced/objectapi/intro",permalink:"/docs/advanced/objectapi/intro",draft:!1,editUrl:"https://github.com/apigear-io/apigear-docs/edit/main/docs/advanced/objectapi/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"ObjectAPI",permalink:"/docs/category/objectapi"},next:{title:"API Foundation",permalink:"/docs/advanced/objectapi/core"}},c={},l=[{value:"Version 0.1.0",id:"version-010",level:4},{value:"Introduction",id:"introduction-1",level:2},{value:"Revision History",id:"revision-history",level:2},{value:"Version 0.2",id:"version-02",level:3},{value:"Definitions",id:"definitions",level:2}],d={toc:l};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"ObjectAPI is an interface specification to describe the boundaries of your software modules in an object format."),(0,i.kt)("p",null,"ObjectAPI sees the world as a set of object interfaces organizes in module. A module is encapsulated in one ObjectAPI document."),(0,i.kt)("p",null,"The specification describes the details how to write such a ObjectAPI document."),(0,i.kt)("h4",{id:"version-010"},"Version 0.1.0"),(0,i.kt)("p",null,'The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in ',(0,i.kt)("a",{parentName:"p",href:"http://www.ietf.org/rfc/rfc2119.txt"},"RFC 2119"),"."),(0,i.kt)("p",null,"The ObjectAPI Specification is copyrighted by ApiGear UG, all rights reserved."),(0,i.kt)("h2",{id:"introduction-1"},"Introduction"),(0,i.kt)("p",null,"The ObjectAPI specification is a project used to describe and document object oriented APIs across languages and technologies."),(0,i.kt)("p",null,"The ObjectAPI specification defines a set of files required to describe such an API.\nThese files can then be used to create utilities, such as documentation, integration and/or testing tools."),(0,i.kt)("p",null,"The ObjectAPI Specification is often used to describe the interface between software modules or inter-process communication (IPC) in distributed systems built using a object oriented programming API. The ObjectAPI recommends to split APIs into smaller modules with loose coupling."),(0,i.kt)("p",null,"The documents describe an API module and its interfaces and data structures."),(0,i.kt)("h2",{id:"revision-history"},"Revision History"),(0,i.kt)("h3",{id:"version-02"},"Version 0.2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Initial ObjectAPI specification"),(0,i.kt)("li",{parentName:"ul"},"Simplified the ObjectAPI document format")),(0,i.kt)("h2",{id:"definitions"},"Definitions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"System")," : A system is a collection of modules, which describe a coherent set of APIs on the same layer."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Module")," : A module describes a name spaced collection of API symbols, such as interfaces, structures, enumerations. There exists one module per file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Interface"),": A interface is a description of a named object with properties, operations and signals."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Structure"),": A structure is a data type with fields describing the data structure. A structure has no operations or signals."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Enumeration"),": An enumeration is a enumerated integer type with a set of named values.")))}u.isMDXComponent=!0}}]);