"use strict";(self.webpackChunkapigear=self.webpackChunkapigear||[]).push([[4612],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),s=d(n),u=r,f=s["".concat(l,".").concat(u)]||s[u]||m[u]||o;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[s]="string"==typeof e?e:r,i[1]=c;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8530:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:4},i="Advanced Concepts",c={unversionedId:"advanced/objectapi/advanced",id:"advanced/objectapi/advanced",title:"Advanced Concepts",description:"Advanced ObjectAPI concepts.",source:"@site/docs/advanced/objectapi/advanced.md",sourceDirName:"advanced/objectapi",slug:"/advanced/objectapi/advanced",permalink:"/docs/advanced/objectapi/advanced",draft:!1,editUrl:"https://github.com/apigear-io/apigear-docs/edit/main/docs/advanced/objectapi/advanced.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docsSidebar",previous:{title:"API Modules",permalink:"/docs/advanced/objectapi/modules"},next:{title:"API Examples",permalink:"/docs/advanced/objectapi/examples"}},l={},d=[{value:"Document information",id:"document-information",level:2},{value:"Meta information",id:"meta-information",level:2},{value:"Compact Writing",id:"compact-writing",level:2}],p={toc:d};function s(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"advanced-concepts"},"Advanced Concepts"),(0,r.kt)("p",null,"Advanced ObjectAPI concepts."),(0,r.kt)("h2",{id:"document-information"},"Document information"),(0,r.kt)("p",null,"The info section allows user to add information related to the current document."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"info:\n  license: <license-identifier>\n")),(0,r.kt)("h2",{id:"meta-information"},"Meta information"),(0,r.kt)("p",null,"Sometimes it is required to add additional information, which is not part of the ObjectAPI specification. For this the meta tag can be used."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"interfaces:\n  - name: Tuner\n    meta:\n      singleton: true\n      config: { port: 1024 }\n")),(0,r.kt)("p",null,"As the information is not part of the specification the applied code generator must have an understanding of the data. For example a C++ code generator could create a singleton type from the interface declaration."),(0,r.kt)("h2",{id:"compact-writing"},"Compact Writing"),(0,r.kt)("p",null,"YAML allows a compact format for single line information. This allows us to shorten API definitions considerable. For example this API"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"structs:\n  - name: Error\n    fields:\n      - name: message,\n        type: string\n      - name: code\n        type: int\n")),(0,r.kt)("p",null,"Can be written in a short format like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"structs:\n  - name: Error\n    fields:\n      - { name: message, type: string }\n      - { name: code, type: int }\n")))}s.isMDXComponent=!0}}]);