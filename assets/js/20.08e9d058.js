(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{292:function(t,e,a){"use strict";a.r(e);var s=a(10),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"api-foundation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api-foundation"}},[t._v("#")]),t._v(" API Foundation")]),t._v(" "),a("p",[t._v("ObjectAPI is defined in terms of modules inside a system. Each module is described as an ObjectAPI document.")]),t._v(" "),a("p",[t._v("ObjectAPI is a YAML based specification to describe objects as interfaces.")]),t._v(" "),a("h2",{attrs:{id:"format"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#format"}},[t._v("#")]),t._v(" Format")]),t._v(" "),a("p",[t._v("ObjectAPI is described as an open specification format using JSON Schema. Every ObjectAPI document must conform to this JSON schema definition.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("While the the API is described in JSON, other formats like YAML can be used as input formats and are automatically converted to JSON by the ObjectAPI tooling.")])]),t._v(" "),a("p",[t._v("Unless otherwise noted all file names in this specification are case sensitive.")]),t._v(" "),a("h2",{attrs:{id:"managing-documents"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#managing-documents"}},[t._v("#")]),t._v(" Managing Documents")]),t._v(" "),a("p",[t._v("The ObjectAPI documents are simple files on the file system. Several files can be processed together and form a system. It is convention that the file name matches the module name.")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("*.module.yaml")]),t._v(" | "),a("code",[t._v("*.module.json")]),t._v(" - ObjectAPI document")])]),t._v(" "),a("p",[t._v("Other files can be added which contain meta information for the API modules. They allow to inject additional information which is not relevant or available during API definitions.")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("*.module.meta.yaml")]),t._v(" | "),a("code",[t._v("*.module.meta.json")]),t._v(" - ObjectAPI meta information injected into the relevant APIs.")])]),t._v(" "),a("p",[t._v("So if a module is name "),a("code",[t._v("org.example")]),t._v(" the ObjectAPI document should be called "),a("code",[t._v("org.example.module.yaml")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Outside of the ObjectAPI specification a solution document format is described which binds several modules together and links them to a code template for code generation.")])]),t._v(" "),a("h2",{attrs:{id:"data-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data-types"}},[t._v("#")]),t._v(" Data Types")]),t._v(" "),a("p",[t._v("In the ObjectAPI specification data types are used in many locations. State, Method return types and parameters, signal parameters or structures.")]),t._v(" "),a("p",[t._v("Data fields are added at the same level to describe the data name and type. For example for the interface properties, these are:")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("properties")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" count\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" int\n")])])]),a("p",[t._v("The general types available to ObjectAPI are:")]),t._v(" "),a("ul",[a("li",[t._v("Primitives ("),a("code",[t._v("bool")]),t._v(", "),a("code",[t._v("int")]),t._v(", "),a("code",[t._v("float")]),t._v(", "),a("code",[t._v("string")]),t._v(")")]),t._v(" "),a("li",[t._v("Containers ("),a("code",[t._v("arrays")]),t._v(")")]),t._v(" "),a("li",[t._v("Complex ("),a("code",[t._v("structures")]),t._v(", "),a("code",[t._v("enumerations")]),t._v(")")])]),t._v(" "),a("h2",{attrs:{id:"primitives"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#primitives"}},[t._v("#")]),t._v(" Primitives")]),t._v(" "),a("p",[t._v("Data types can be re-presented in different forms in different programming languages. They all need to be convertible to JSON data types on request.")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("bool")]),t._v(" - A simple boolean value (true or false)")]),t._v(" "),a("li",[a("code",[t._v("int")]),t._v(" - A signed integer value")]),t._v(" "),a("li",[a("code",[t._v("float")]),t._v(" - A floating point value")]),t._v(" "),a("li",[a("code",[t._v("string")]),t._v(" - A string value")])]),t._v(" "),a("h2",{attrs:{id:"arrays"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arrays"}},[t._v("#")]),t._v(" Arrays")]),t._v(" "),a("p",[t._v("An array is an index based list of primitive or complex data types. Further nesting of containers are not supported but can be achieved using structs as array items. A data type is converted into a container by setting the type to array and specifying the containing type in the items key.")]),t._v(" "),a("p",[t._v("For example an integer array can be noted like this:")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("properties")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" names\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" array\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("items")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string\n")])])]),a("p",[t._v("If an array does contain a symbol as containing type, then the symbol name can be used in the items key.")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("properties")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" messages\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" array\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("items")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ref")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Message "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("Primitive types are always start with a lower case character and symbols always with an upper case character.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The code templates will change the casing based on the target language preferences.")])]),t._v(" "),a("h2",{attrs:{id:"complex-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#complex-types"}},[t._v("#")]),t._v(" Complex Types")]),t._v(" "),a("p",[t._v("A symbol is a named element inside a module. This can be either an interface, struct or enum/flag symbol.")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("structs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Message\n")])])]),a("p",[t._v("Inside the same module the type can be referenced by the name of the symbol using a "),a("code",[t._v("ref")]),t._v(". This holds true for all symbols.")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("properties")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" msg1\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ref")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Message "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" msg2\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" array\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("items")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" struct\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ref")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Message "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("Outside the module, the module itself needs to be imported and the type needs to be used with its fully qualified name")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("imports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" org.example\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("interfaces")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Interface1\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("properties")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" msg1\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ref")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" org.example.Message "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("org.example.Message")]),t._v(" - external symbol")])]),t._v(" "),a("p",[t._v("Note: Not every language profile does support importing.")]),t._v(" "),a("h2",{attrs:{id:"rich-text-formatting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rich-text-formatting"}},[t._v("#")]),t._v(" Rich Text Formatting")]),t._v(" "),a("p",[t._v("Throughout the specification "),a("code",[t._v("description")]),t._v(" support the markdown syntax.")])])}),[],!1,null,null,null);e.default=n.exports}}]);