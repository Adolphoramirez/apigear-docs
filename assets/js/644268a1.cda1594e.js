"use strict";(self.webpackChunkapigear=self.webpackChunkapigear||[]).push([[1027],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return n?o.createElement(f,a(a({ref:t},p),{},{components:n})):o.createElement(f,a({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9568:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const i={sidebar_position:3},a="API Monitoring",l={unversionedId:"cli/monitor",id:"cli/monitor",title:"API Monitoring",description:"API Monitoring is a feature that allows you to monitor the behavior of an API. This is useful for testing, demonstration, and development. It decouples the interface implementation from the interface users.",source:"@site/docs/cli/monitor.md",sourceDirName:"cli",slug:"/cli/monitor",permalink:"/docs/cli/monitor",draft:!1,editUrl:"https://github.com/apigear-io/apigear-docs/edit/main/docs/cli/monitor.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docsSidebar",previous:{title:"Code Generation",permalink:"/docs/cli/generate"},next:{title:"API Simulation",permalink:"/docs/cli/simulate"}},s={},c=[{value:"Quick API Monitoring",id:"quick-api-monitoring",level:2}],p={toc:c};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"api-monitoring"},"API Monitoring"),(0,r.kt)("p",null,"API Monitoring is a feature that allows you to monitor the behavior of an API. This is useful for testing, demonstration, and development. It decouples the interface implementation from the interface users."),(0,r.kt)("h2",{id:"quick-api-monitoring"},"Quick API Monitoring"),(0,r.kt)("p",null,"API Monitoring is a feature of the ApiGear platform. It allows to monitor the traffic of an API. The ",(0,r.kt)("inlineCode",{parentName:"p"},"apigear")," command line tool can be used to monitor an API. The following example shows how to monitor the demo API."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"apigear monitor run\n")),(0,r.kt)("p",null,"This will start the API monitoring server. The server will listen on port 5555. To change the port use the ",(0,r.kt)("inlineCode",{parentName:"p"},"--port")," option."),(0,r.kt)("p",null,"The monitoring server will listen for API calls. Normally the API events will come from a running API client. It is also possible to feed API events using the ",(0,r.kt)("inlineCode",{parentName:"p"},"feed")," command."),(0,r.kt)("p",null,"The following example shows how to feed API event to the monitor using a new line delimited json document (",(0,r.kt)("inlineCode",{parentName:"p"},"NDJSON"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'// demo.ndjson\n{ "id": "1", "kind": "call", "symbol": "demo.Counter/increment" }\n{ "id": "2", "kind": "state", "symbol": "demo.Counter", "props": { "count": 99 } } }\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"apigear monitor feed demo.ndjson\n")),(0,r.kt)("p",null,"This will send the API calls to the monitoring server. The monitoring server will print the API calls to the console."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Currently the monitoring server does not store the API calls. This will be added in a future release with a playback feature.")))}m.isMDXComponent=!0}}]);