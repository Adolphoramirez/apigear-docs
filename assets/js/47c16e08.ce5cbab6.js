"use strict";(self.webpackChunkapigear=self.webpackChunkapigear||[]).push([[9122],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},l="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=p(t),u=a,f=l["".concat(c,".").concat(u)]||l[u]||m[u]||o;return t?r.createElement(f,i(i({ref:n},d),{},{components:t})):r.createElement(f,i({ref:n},d))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[l]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6717:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_position:5},i="API Examples",s={unversionedId:"advanced/objectapi/examples",id:"advanced/objectapi/examples",title:"API Examples",description:"Counter",source:"@site/docs/advanced/objectapi/examples.md",sourceDirName:"advanced/objectapi",slug:"/advanced/objectapi/examples",permalink:"/docs/advanced/objectapi/examples",draft:!1,editUrl:"https://github.com/apigear-io/apigear-docs/edit/main/docs/advanced/objectapi/examples.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docsSidebar",previous:{title:"Advanced Concepts",permalink:"/docs/advanced/objectapi/advanced"},next:{title:"ObjectAPI IDL",permalink:"/docs/advanced/objectapi/idl"}},c={},p=[{value:"Counter",id:"counter",level:2},{value:"Radio Tuner",id:"radio-tuner",level:2},{value:"Weather Station",id:"weather-station",level:2}],d={toc:p};function l(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"api-examples"},"API Examples"),(0,a.kt)("h2",{id:"counter"},"Counter"),(0,a.kt)("p",null,"The typical counter example to increment and decrement a count value."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},'schema: apigear.module/1.0\nname: org.example\nversion: "1.0"\ninfo:\n  title: "Counter API"\n  description: A counter module develope\n\ninterfaces:\n  - name: Counter\n    description: Counter interface to count up and down\n    properties:\n      - name: count\n        type: int\n    operations:\n      - name: increment\n      - name: decrement\n')),(0,a.kt)("h2",{id:"radio-tuner"},"Radio Tuner"),(0,a.kt)("p",null,"A radio tuner with a current station and a station list. It can operate on different wavebands."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"schema: apigear.module/1.0\nmodule: entertainment.tuner\nversion: 1.0\n\ninterfaces:\n  - name: Tuner\n    description: A tuner service to manages tuner stations\n    properties:\n      - name: currentStation\n        type: Station\n        description: current selected station\n      - name: stationList\n        type: Station[]\n        description: list of current available stations\n    operations:\n      - name: nextStation\n        description: sets current station to next station from list\n      - name: previousStation\n        description: sets current station to previous station from list\n      - name: updateCurrentStation\n        description: update current station\n        params:\n          - name: stationId\n          - type: id\n\nstructs:\n  - name: Station\n    fields:\n      - name: stationId\n        type: id\n        description: station id\n      - name: name\n        type: string\n        description: station name\n      - name: modified\n        type: string\n        format: date-time\n        description: station last time modified\n\nenums:\n  - name: State\n    description: State for tuner interface\n    members:\n      - name: None\n        description: tuner not initialized\n      - name: Loading\n        description: tuner is loading\n      - name: Ready\n        description: tuner is ready and operational\n      - name: Error\n        description: tuner received an error\n  - name: Waveband\n    members:\n      - name: FM\n        description: FM waveband\n      - name: AM\n        description: AM waveband\n")),(0,a.kt)("h2",{id:"weather-station"},"Weather Station"),(0,a.kt)("p",null,"The weather station uses a more compact YAML format to display the current temperature."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"schema: apigear.module/1.0\nmodule: sensors.weatherstation\nversion: 2.5\n\ninterfaces:\n  - name: WeatherStation\n  - properties:\n      - { name: temperature, type: float }\n      - { name: lastError, type: Error }\n  - operations:\n      - { name: reset }\n  - signals:\n      - name: error\n        params:\n          - { name: error, type: Error }\n\nstructs:\n  - name: Error\n    fields:\n      - name: msg\n        type: string\n")))}l.isMDXComponent=!0}}]);