(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{286:function(e,t,a){"use strict";a.r(t);var s=a(10),n=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"code-generation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#code-generation"}},[e._v("#")]),e._v(" Code Generation")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("generate")]),e._v(" command is used to generate code from a API description. The generation is based on SDK templates which are available from a central registry.")]),e._v(" "),t("h2",{attrs:{id:"quick-code-generation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#quick-code-generation"}},[e._v("#")]),e._v(" Quick Code Generation")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("apigear")]),e._v(" command line tool can be used to generate code from an API definition. The following example shows how to generate code from the a demo API definition.")]),e._v(" "),t("div",{staticClass:"language-go extra-class"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// demo.idl")]),e._v("\nmodule demo "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.0")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("interface")]),e._v(" Counter "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("int")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("increment")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("decrement")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),t("p",[e._v("For example to generate a C++ 14 SDK from the demo API definition just run the following command.")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("apigear generate expert "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-i")]),e._v(" demo.idl "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-o")]),e._v(" tmp "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-t")]),e._v(" template-cpp14\n")])])]),t("p",[e._v("The "),t("code",[e._v("expert")]),e._v(" mode is used to generate code from an IDL file. The "),t("code",[e._v("-i")]),e._v(" option specifies the input file. The "),t("code",[e._v("-o")]),e._v(" option specifies the output directory. The "),t("code",[e._v("-t")]),e._v(" option specifies the template to use. The "),t("code",[e._v("template-cpp14")]),e._v(" template is used to generate C++ 14 code.")]),e._v(" "),t("p",[e._v("If the template does not point to a local directory the template will be downloaded from the template registry and installed in a local cache directory.")]),e._v(" "),t("p",[e._v("By default the latest version of the template is used. To use a specific version of the template add the version to the template name using the "),t("code",[e._v("@<version>")]),e._v(" syntax.")]),e._v(" "),t("h2",{attrs:{id:"solution-based-code-generation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#solution-based-code-generation"}},[e._v("#")]),e._v(" Solution based Code Generation")]),e._v(" "),t("p",[e._v("To streamline the code generation you can create a configuration file called solution. The following example shows how to create a configuration file for the C++ 14 SDK.")]),e._v(" "),t("div",{staticClass:"language-yaml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# solution.yaml")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("layers")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" cpp14\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("inputs")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" demo.idl\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("output")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" tmp\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("template")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" template"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("cpp14\n")])])]),t("p",[e._v("The "),t("code",[e._v("layers")]),e._v(" section defines the layers of the solution. Each layer defines a set of inputs, an output directory and a template. The "),t("code",[e._v("inputs")]),e._v(" section defines the input files for the layer. The "),t("code",[e._v("output")]),e._v(" section defines the output directory for the layer. The "),t("code",[e._v("template")]),e._v(" section defines the template to use for the layer.")]),e._v(" "),t("p",[e._v("To generate the code from the solution just run the following command.")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("apigear generate solution solution.yaml\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);