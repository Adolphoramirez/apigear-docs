"use strict";(self.webpackChunkapigear=self.webpackChunkapigear||[]).push([[7784],{3905:(e,a,t)=>{t.d(a,{Zo:()=>d,kt:()=>f});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=n.createContext({}),p=function(e){var a=n.useContext(c),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},d=function(e){var a=p(e.components);return n.createElement(c.Provider,{value:a},e.children)},u="mdxType",s={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,f=u["".concat(c,".").concat(m)]||u[m]||s[m]||l;return t?n.createElement(f,o(o({ref:a},d),{},{components:t})):n.createElement(f,o({ref:a},d))}));function f(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=m;var i={};for(var c in a)hasOwnProperty.call(a,c)&&(i[c]=a[c]);i.originalType=e,i[u]="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=t[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2562:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var n=t(7462),r=(t(7294),t(3905));const l={sidebar_position:3},o="Calculator API Demo",i={unversionedId:"guide/calculator",id:"guide/calculator",title:"Calculator API Demo",description:"A calculator allows you to enter numbers and calculate a new value based on different operations. Our calculator will support add, subtract, multiply and divide operations as well as a clear action. The calculator always has a total value to show the current calculated value.",source:"@site/docs/guide/calculator.md",sourceDirName:"guide",slug:"/guide/calculator",permalink:"/docs/guide/calculator",draft:!1,editUrl:"https://github.com/apigear-io/apigear-docs/edit/main/docs/guide/calculator.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docsSidebar",previous:{title:"Counter API Demo",permalink:"/docs/guide/counter"},next:{title:"Desktop Studio",permalink:"/docs/category/desktop-studio"}},c={},p=[{value:"Defining an API Module",id:"defining-an-api-module",level:2},{value:"Python Interface",id:"python-interface",level:2},{value:"Sample Implementation",id:"sample-implementation",level:2},{value:"API Updates",id:"api-updates",level:2}],d={toc:p};function u(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"calculator-api-demo"},"Calculator API Demo"),(0,r.kt)("p",null,"A calculator allows you to enter numbers and calculate a new value based on different operations. Our calculator will support ",(0,r.kt)("inlineCode",{parentName:"p"},"add"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"subtract"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"multiply")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"divide")," operations as well as a ",(0,r.kt)("inlineCode",{parentName:"p"},"clear")," action. The calculator always has a total value to show the current calculated value."),(0,r.kt)("p",null,"A typical frontend would show a field to display the current total value and a grid of numbers from 0 to 9 as well as a grid for the operations ",(0,r.kt)("inlineCode",{parentName:"p"},"+"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"-"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"*"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"/")," and the ",(0,r.kt)("inlineCode",{parentName:"p"},"clear")," action."),(0,r.kt)("alert",null,"In addition to the explanation below we also created some real modules for different languages and example applications. Please check out our [demos over at github](https://github.com/apigear-io/objectapi-demos/tree/master/calc) "),(0,r.kt)("h2",{id:"defining-an-api-module"},"Defining an API Module"),(0,r.kt)("p",null,"From inside a project we create a new API module called ",(0,r.kt)("inlineCode",{parentName:"p"},"demo.calc")," using the ",(0,r.kt)("inlineCode",{parentName:"p"},"Create Module")," action and create a new interface named 'Calculator'."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'schema: apigear.module/1.0\nname: demo.calc\nversion: "1.0"\n\ninterfaces:\n  - name: Calculator\n')),(0,r.kt)("p",null,"A typical calculator always displays the current value calculated. We will add this as a property to the interface."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"interfaces:\n  - name: Calculator\n    properties:\n      - name: value\n        type: int\n")),(0,r.kt)("p",null,"We expect the value is always updated when a number was entered and a new operation is entered."),(0,r.kt)("p",null,"We add the first operation ",(0,r.kt)("inlineCode",{parentName:"p"},"add")," to the calculator. It takes one parameter and the number to be added."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"interfaces:\n  - name: Calculator\n    operations:\n      - name: add\n          params:\n            - name: a\n              type: int\n")),(0,r.kt)("p",null,"Let's add the rest of the calculator operations and the clear action."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'schema: apigear.module/1.0\nname: demo.calc\nversion: "1.0"\n\ninterfaces:\n  - name: Calculator\n    properties:\n      - name: value\n        type: int\n    operations:\n      - name: add\n        params:\n          - name: a\n            type: int\n      - name: subtract\n        params:\n          - name: a\n            type: int\n      - name: multiply\n        params:\n          - name: a\n            type: int\n      - name: divide\n        params:\n          - name: a\n            type: int\n      - name: clear\n')),(0,r.kt)("p",null,"We added all missing calculator operations. The clear action will reset the calculator value to ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,r.kt)("h2",{id:"python-interface"},"Python Interface"),(0,r.kt)("p",null,"For our implementation we configure a Python SDK as runner and generate our calculator SDK. The abstract calculator interface will look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# demo_calc.py\n\nclass AbstractCalculator(object):\n  def __init__(self):\n    self.value = 0\n\n  def add(a: int):\n    raise NotImplementedError\n\n  def subtract(a: int):\n    raise NotImplementedError\n\n  def multiply(a: int):\n    raise NotImplementedError\n\n  def divide(a: int):\n    raise NotImplementedError\n\n  def clear(a: int):\n    raise NotImplementedError\n")),(0,r.kt)("h2",{id:"sample-implementation"},"Sample Implementation"),(0,r.kt)("p",null,"To implement the interface we derive from the abstract calculator and implement the missing operations. A simple implementation could look like this."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"\n# import our generated interfaces\nimport org_daily\n\nclass Calculator(demo_calc.AbstractCalculator):\n  def add(a: int):\n    self.value += a\n\n  def subtract(a: int):\n    self.value -= a\n\n  def multiply(a: int):\n    self.value *= a\n\n  def divide(a: int):\n    self.value /= a\n\n  def clear(a: int):\n    self.value = 0\n")),(0,r.kt)("h2",{id:"api-updates"},"API Updates"),(0,r.kt)("p",null,"The next time we change the API module we need to update the abstract interface and ensure all changed operations are implemented."),(0,r.kt)("p",null,"It is very easy now to add implementations also for other programming languages or even for a micro service using one of the many supported SDK templates."))}u.isMDXComponent=!0}}]);