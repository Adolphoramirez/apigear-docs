"use strict";(self.webpackChunkapigear=self.webpackChunkapigear||[]).push([[9274],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=s(n),d=r,g=c["".concat(p,".").concat(d)]||c[d]||u[d]||o;return n?a.createElement(g,l(l({ref:t},m),{},{components:n})):a.createElement(g,l({ref:t},m))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1214:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:3},l="Template Primer",i={unversionedId:"advanced/maker/template",id:"advanced/maker/template",title:"Template Primer",description:"The template language is based on Go Text Templates. The template language is described in the Go Text Template documentation.",source:"@site/docs/advanced/maker/template.md",sourceDirName:"advanced/maker",slug:"/advanced/maker/template",permalink:"/docs/advanced/maker/template",draft:!1,editUrl:"https://github.com/apigear-io/apigear-docs/edit/main/docs/advanced/maker/template.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docsSidebar",previous:{title:"Quick Start",permalink:"/docs/advanced/maker/tutorial"},next:{title:"Filter Reference",permalink:"/docs/advanced/maker/filters"}},p={},s=[{value:"Basic Syntax",id:"basic-syntax",level:2},{value:"Loops",id:"loops",level:2},{value:"Assignments",id:"assignments",level:2},{value:"Conditionals",id:"conditionals",level:2},{value:"White Space",id:"white-space",level:2},{value:"String Formatting",id:"string-formatting",level:2},{value:"Debugging Templates",id:"debugging-templates",level:2}],m={toc:s};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"template-primer"},"Template Primer"),(0,r.kt)("p",null,"The template language is based on Go Text Templates. The template language is described in the ",(0,r.kt)("a",{parentName:"p",href:"https://golang.org/pkg/text/template/"},"Go Text Template documentation"),"."),(0,r.kt)("p",null,"To use a template you need to define a template file with the extension ",(0,r.kt)("inlineCode",{parentName:"p"},".tpl"),". Inside the template file you can use the template language to generate text, which is then written to the target file."),(0,r.kt)("h2",{id:"basic-syntax"},"Basic Syntax"),(0,r.kt)("p",null,"The template syntax writes the text as is to the target file. Actions inside the text allow to control the output. A action is a text inside ",(0,r.kt)("inlineCode",{parentName:"p"},"{{")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"}}"),". The action can be a variable, a function or a control structure."),(0,r.kt)("p",null,"To access variables you can use the current scope ",(0,r.kt)("inlineCode",{parentName:"p"},"."),". All variables are title case. For example to access the name of the current module you can use the following template:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"{{ .Module.Name }}\n")),(0,r.kt)("h2",{id:"loops"},"Loops"),(0,r.kt)("p",null,"To iterate over a list you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"range")," keyword. For example to iterate over all interfaces in the current module:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"{{ range .Module.Interfaces }}\n    {{ .Name }}\n{{ end }}\n")),(0,r.kt)("p",null,"See how the current context changes inside the range loop."),(0,r.kt)("p",null,"A loop can also be empty and the ",(0,r.kt)("inlineCode",{parentName:"p"},"else")," keyword can be used to define the empty case. For example to iterate over all interfaces in the current module:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"{{ range .Module.Interfaces }}\n    {{ .Name }}\n{{ else }}\n    No interfaces found\n{{ end }}\n")),(0,r.kt)("p",null,"To use the index and current element you can "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"{{ range $index, $element := .Module.Interfaces }}\n    {{ $index }}: {{ $element.Name }}\n{{ end }}\n")),(0,r.kt)("p",null,"Index is a zero-based iterator and element is the current element in the loop."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"To join lists with commas you can use the loop index."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-go"},"{{ range $i, $e := .Module.Interfaces }}\n    {{ if $i}},{{ end }}{{ .Name }}\n{{ end }}\n")),(0,r.kt)("p",{parentName:"admonition"},"A comma will be printed when ",(0,r.kt)("inlineCode",{parentName:"p"},"$i")," is not zero.")),(0,r.kt)("h2",{id:"assignments"},"Assignments"),(0,r.kt)("p",null,"To define new variable you can assign a value to a variable. For example to assign the name of the current module to a variable:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"{{ $name := .Module.Name }}\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"This allows you to define a set of variables at the beginning of the document and used them throughout. For example a class name for the current interface:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-go"},"{{ $class := Camel .Name }}\n"))),(0,r.kt)("h2",{id:"conditionals"},"Conditionals"),(0,r.kt)("p",null,"You can use an if-end or if-else-end construct to control the output. For example to only output the name of the current interface if it is not empty:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"{{ if .Name }}\n    {{ .Name }}\n{{ end }}\n")),(0,r.kt)("p",null,"or to output a default value if the name is empty:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"{{ if .Name }}\n    {{ .Name }}\n{{ else }}\n    {{ .Module.Name }}\n{{ end }}\n")),(0,r.kt)("h2",{id:"white-space"},"White Space"),(0,r.kt)("p",null,"The template language allows to control the white space. For example to remove the white space before the output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"{{- if .Name }}\n    {{ .Name }}\n{{- end }}\n")),(0,r.kt)("p",null,"or to remove the white space after the output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"{{ if .Name -}}\n    {{ .Name }}\n{{ end }}\n")),(0,r.kt)("h2",{id:"string-formatting"},"String Formatting"),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"printf")," function to format strings. For example to prefix an interface name with ",(0,r.kt)("inlineCode",{parentName:"p"},"I"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'{{ printf "I%s" .Name }}\n')),(0,r.kt)("p",null,"or to merge two strings, where each string is camel cased."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'{{ printf "%s%s" (Camel .Interface.Name) (Camel .Name) }}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"printf")," syntax is described in the ",(0,r.kt)("a",{parentName:"p",href:"https://gobyexample.com/string-formatting"},"Go Printf Formatting"),"."),(0,r.kt)("h2",{id:"debugging-templates"},"Debugging Templates"),(0,r.kt)("p",null,"Sometimes it is useful to see the current context of the template. You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"printf")," function to print the current context:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'{{ printf "%#v" . }}\n')))}c.isMDXComponent=!0}}]);