"use strict";(self.webpackChunkapigear=self.webpackChunkapigear||[]).push([[9218],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>g});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),i=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=i(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),d=i(a),k=n,g=d["".concat(s,".").concat(k)]||d[k]||u[k]||l;return a?r.createElement(g,o(o({ref:t},m),{},{components:a})):r.createElement(g,o({ref:t},m))}));function g(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,o=new Array(l);o[0]=k;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[d]="string"==typeof e?e:n,o[1]=p;for(var i=2;i<l;i++)o[i]=a[i];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}k.displayName="MDXCreateElement"},8444:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>p,toc:()=>i});var r=a(7462),n=(a(7294),a(3905));const l={sidebar_position:4},o="Filter Reference",p={unversionedId:"advanced/maker/filters",id:"advanced/maker/filters",title:"Filter Reference",description:"Template Filters",source:"@site/docs/advanced/maker/filters.md",sourceDirName:"advanced/maker",slug:"/advanced/maker/filters",permalink:"/docs/advanced/maker/filters",draft:!1,editUrl:"https://github.com/apigear-io/apigear-docs/edit/main/docs/advanced/maker/filters.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docsSidebar",previous:{title:"Template Primer",permalink:"/docs/advanced/maker/template"},next:{title:"Symbol Reference",permalink:"/docs/advanced/maker/symbols"}},s={},i=[{value:"Template Filters",id:"template-filters",level:2},{value:"String Filter",id:"string-filter",level:2},{value:"<strong>snake</strong>, <strong>Snake</strong>, <strong>SNAKE</strong>",id:"snake-snake-snake",level:3},{value:"<strong>camel</strong>, <strong>Camel</strong>, <strong>CAMEL</strong>",id:"camel-camel-camel",level:3},{value:"<strong>dot</strong>, <strong>Dot</strong>, <strong>DOT</strong>",id:"dot-dot-dot",level:3},{value:"<strong>kebap</strong>, <strong>Kebap</strong>, <strong>KEBAP</strong>",id:"kebap-kebap-kebap",level:3},{value:"<strong>path</strong>, <strong>Path</strong>, <strong>PATH</strong>",id:"path-path-path",level:3},{value:"<strong>lower</strong>",id:"lower",level:3},{value:"*upper**",id:"upper",level:3},{value:"<strong>upperFirst</strong>",id:"upperfirst",level:3},{value:"<strong>lowerFirst</strong>",id:"lowerfirst",level:3},{value:"<strong>first</strong>, <strong>First</strong>, <strong>FIRST</strong>",id:"first-first-first",level:3},{value:"<strong>join</strong>",id:"join",level:3},{value:"<strong>trimPrefix</strong>",id:"trimprefix",level:3},{value:"<strong>trimSuffix</strong>",id:"trimsuffix",level:3},{value:"<strong>replace</strong>",id:"replace",level:3},{value:"<strong>int2word</strong>, <strong>Int2Word</strong>, <strong>INT2WORD</strong>",id:"int2word-int2word-int2word",level:3},{value:"<strong>plural</strong>",id:"plural",level:3},{value:"<strong>nl</strong>",id:"nl",level:3},{value:"<strong>version</strong>",id:"version",level:3},{value:"Language Filters",id:"language-filters",level:2},{value:"<strong>{lang}Return</strong>",id:"langreturn",level:3},{value:"<strong>{lang}Param</strong>",id:"langparam",level:3},{value:"<strong>{lang}Params</strong>",id:"langparams",level:3},{value:"<strong>{lang}Default</strong>",id:"langdefault",level:3},{value:"<strong>{lang}}Vars</strong>",id:"langvars",level:3},{value:"<strong>{lang}Var</strong>",id:"langvar",level:3},{value:"<strong>{lang}Type</strong>",id:"langtype",level:3},{value:"C++14 Filters",id:"c14-filters",level:2},{value:"Go Filters",id:"go-filters",level:2},{value:"TypeScript Filters",id:"typescript-filters",level:2},{value:"QtC++ Filters",id:"qtc-filters",level:2},{value:"Python Filters",id:"python-filters",level:2},{value:"Unreal Engine Filters",id:"unreal-engine-filters",level:2}],m={toc:i};function d(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"filter-reference"},"Filter Reference"),(0,n.kt)("h2",{id:"template-filters"},"Template Filters"),(0,n.kt)("p",null,"String filters are used inside templates to transform text in different formats."),(0,n.kt)("p",null,"A typical usage would use the filter name followed by a string reference to the value to be transformed. For example:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"{{ snake .Module.Name }}\n")),(0,n.kt)("p",null,"Where ",(0,n.kt)("inlineCode",{parentName:"p"},".")," is the current context and ",(0,n.kt)("inlineCode",{parentName:"p"},".Module")," is the module object from the current context and ",(0,n.kt)("inlineCode",{parentName:"p"},".Name")," is the name property of the module object. The context can change for example inside a range loop."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"{{ range .Module.Interfaces }}\n  {{ snake .Name }}\n{{ end }}\n")),(0,n.kt)("p",null,"Where the current context if the interface object inside the range loop."),(0,n.kt)("h2",{id:"string-filter"},"String Filter"),(0,n.kt)("p",null,"The list of the common string filters are listed here"),(0,n.kt)("h3",{id:"snake-snake-snake"},(0,n.kt)("strong",{parentName:"h3"},"snake"),", ",(0,n.kt)("strong",{parentName:"h3"},"Snake"),", ",(0,n.kt)("strong",{parentName:"h3"},"SNAKE")),(0,n.kt)("p",null,"Converts a string to snake case - (lower, title, upper) case with underscores"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'  {{snake "org.demo"}} => org_demo\n  {{Snake "org.demo"}} => Org_Demo\n  {{SNAKE "org.demo"}} => ORG_DEMO\n')),(0,n.kt)("h3",{id:"camel-camel-camel"},(0,n.kt)("strong",{parentName:"h3"},"camel"),", ",(0,n.kt)("strong",{parentName:"h3"},"Camel"),", ",(0,n.kt)("strong",{parentName:"h3"},"CAMEL")),(0,n.kt)("p",null,"Converts a string to camel case - (lower, title, upper) case with first letter lower case"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{camel "org.demo"}} => orgDemo\n{{Camel "org.demo"}} => OrgDemo\n{{CAMEL "org.demo"}} => ORGDEMO\n')),(0,n.kt)("h3",{id:"dot-dot-dot"},(0,n.kt)("strong",{parentName:"h3"},"dot"),", ",(0,n.kt)("strong",{parentName:"h3"},"Dot"),", ",(0,n.kt)("strong",{parentName:"h3"},"DOT")),(0,n.kt)("p",null,"Converts a string to dot case - (lower, title, upper) case with dots"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{dot "org.demo"}} => org.demo\n{{Dot "org.demo"}} => Org.Demo\n{{DOT "org.demo"}} => ORG.DEMO\n')),(0,n.kt)("h3",{id:"kebap-kebap-kebap"},(0,n.kt)("strong",{parentName:"h3"},"kebap"),", ",(0,n.kt)("strong",{parentName:"h3"},"Kebap"),", ",(0,n.kt)("strong",{parentName:"h3"},"KEBAP")),(0,n.kt)("p",null,"Converts a string to kebap case - (lower, title, upper) case with dashes"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{kebap "org.demo"}} => org-demo\n{{Kebap "org.demo"}} => Org-Demo\n{{KEBAP "org.demo"}} => ORG-DEMO\n')),(0,n.kt)("h3",{id:"path-path-path"},(0,n.kt)("strong",{parentName:"h3"},"path"),", ",(0,n.kt)("strong",{parentName:"h3"},"Path"),", ",(0,n.kt)("strong",{parentName:"h3"},"PATH")),(0,n.kt)("p",null,"Converts a string to path case - (lower, title, upper) case with slashes"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{path "org.demo"}} => org/demo\n{{Path "org.demo"}} => Org/Demo\n{{PATH "org.demo"}} => ORG/DEMO\n')),(0,n.kt)("h3",{id:"lower"},(0,n.kt)("strong",{parentName:"h3"},"lower")),(0,n.kt)("p",null,"Converts a string to lower case"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{lower "org.demo"}} => org.demo\n')),(0,n.kt)("h3",{id:"upper"},"*upper**"),(0,n.kt)("p",null,"Converts a string to upper case"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{upper "org.demo"}} => ORG.DEMO\n')),(0,n.kt)("h3",{id:"upperfirst"},(0,n.kt)("strong",{parentName:"h3"},"upperFirst")),(0,n.kt)("p",null,"Converts the first letter of a string to upper case"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{upper1 "org.demo"}} => Org.demo\n')),(0,n.kt)("h3",{id:"lowerfirst"},(0,n.kt)("strong",{parentName:"h3"},"lowerFirst")),(0,n.kt)("p",null,"Converts the first letter of a string to lower case"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{lower1 "org.demo"}} => org.demo\n')),(0,n.kt)("h3",{id:"first-first-first"},(0,n.kt)("strong",{parentName:"h3"},"first"),", ",(0,n.kt)("strong",{parentName:"h3"},"First"),", ",(0,n.kt)("strong",{parentName:"h3"},"FIRST")),(0,n.kt)("p",null,"Returns the first character of a string as lower, unchanged, upper case"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{first "org.demo"}} => o\n{{First "org.demo"}} => o\n{{FIRST "org.demo"}} => O\n')),(0,n.kt)("h3",{id:"join"},(0,n.kt)("strong",{parentName:"h3"},"join")),(0,n.kt)("p",null,"joins a list of strings with a separator"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{join .Module.Interfaces ", "}} => org.demo.Interface1, org.demo.Interface2\n')),(0,n.kt)("h3",{id:"trimprefix"},(0,n.kt)("strong",{parentName:"h3"},"trimPrefix")),(0,n.kt)("p",null,"Trims a prefix from a string"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{trimPrefix "org.demo" "org."}} => demo\n')),(0,n.kt)("h3",{id:"trimsuffix"},(0,n.kt)("strong",{parentName:"h3"},"trimSuffix")),(0,n.kt)("p",null,"Trims a suffix from a string"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{trimSuffix "org.demo" ".demo"}} => org\n')),(0,n.kt)("h3",{id:"replace"},(0,n.kt)("strong",{parentName:"h3"},"replace")),(0,n.kt)("p",null,"Replaces a string with another string"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{replace "org.demo" "org" "com"}} => com.demo\n')),(0,n.kt)("h3",{id:"int2word-int2word-int2word"},(0,n.kt)("strong",{parentName:"h3"},"int2word"),", ",(0,n.kt)("strong",{parentName:"h3"},"Int2Word"),", ",(0,n.kt)("strong",{parentName:"h3"},"INT2WORD")),(0,n.kt)("p",null,"Converts an integer to words (lower, title and upper case)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"{{int2word 1}} => one\n{{Int2Word 1}} => One\n{{INT2WORD 1}} => ONE\n")),(0,n.kt)("h3",{id:"plural"},(0,n.kt)("strong",{parentName:"h3"},"plural")),(0,n.kt)("p",null,"pluralizes a string"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{plural "org.demo"}} => org.demos\n')),(0,n.kt)("h3",{id:"nl"},(0,n.kt)("strong",{parentName:"h3"},"nl")),(0,n.kt)("p",null,"prints a new line"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"{{nl}}\n")),(0,n.kt)("h3",{id:"version"},(0,n.kt)("strong",{parentName:"h3"},"version")),(0,n.kt)("p",null,"extracts major, minor, build version from a version string"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{$v := version "1.2.3"}}\n{{$v}} => 1.2.3\n{{$v.Major}} => 1\n{{$v.Minor}} => 2\n{{$v.Build}} => 3\n')),(0,n.kt)("h2",{id:"language-filters"},"Language Filters"),(0,n.kt)("p",null,"All programming languages share a common set of filters which then are adapted to the specifics of the language.\nThese are ",(0,n.kt)("inlineCode",{parentName:"p"},"return"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"param"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"params"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"vars"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"names")," and the ",(0,n.kt)("inlineCode",{parentName:"p"},"default")," filter."),(0,n.kt)("p",null,"For example for the C++ programming language you would use the ",(0,n.kt)("inlineCode",{parentName:"p"},"return")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"params")," filter named ",(0,n.kt)("inlineCode",{parentName:"p"},"cpp14Return")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"cpp14Params")," during operation declaration."),(0,n.kt)("p",null,"A typical usage could look like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{ range .Operations }}\n  {{ cppReturn "" .Return }} {{ camel .Name }}({{ cppParams "" .Params }});\n{{ end }}\n')),(0,n.kt)("p",null,"Here the ",(0,n.kt)("inlineCode",{parentName:"p"},"cppReturn")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"cppParams")," are the language specific filters for the C++ programming language. The ",(0,n.kt)("inlineCode",{parentName:"p"},'""')," is the a prefix applied to the return type and the parameters. This is used to add a namespace to the return type and the parameters. All language specific filters have the same signature."),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},'We might offer a "2" version of a language filter in the future (e.g. ',(0,n.kt)("inlineCode",{parentName:"p"},"cppReturn")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"cppReturn2"),") where the second version will support the prefix syntax.")),(0,n.kt)("p",null,"These are the common filters for all languages"),(0,n.kt)("h3",{id:"langreturn"},(0,n.kt)("strong",{parentName:"h3"},"{lang}Return")),(0,n.kt)("p",null,"Takes and typed element and returns the type declaration of the type"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{ range .Module.Interfaces }}\n{{ range .Operations }}\n  {{ cppReturn "" .Return }} {{ camel .Name }}({{ cppParams "" .Params }});\n{{ end }}\n{{ end }}\n')),(0,n.kt)("h3",{id:"langparam"},(0,n.kt)("strong",{parentName:"h3"},"{lang}Param")),(0,n.kt)("p",null,"Takes a typed element and returns the function parameter declaration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{ range .Module.Interfaces }}\n{{ range .Operations }}\n  {{ cppReturn "" .Return }} {{ camel .Name }}(\n    {{ range $i, $p := .Params }}\n      {{ if $i }}, {{ end }}\n    {{ cppParam "" $p }}\n    {{ end }});\n{{ end }}\n{{ end }}\n')),(0,n.kt)("h3",{id:"langparams"},(0,n.kt)("strong",{parentName:"h3"},"{lang}Params")),(0,n.kt)("p",null,"Takes an operation and return the lists of function parameters"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{ range .Module.Interfaces }}\n{{ range .Operations }}\n  {{ cppReturn "" .Return }} {{ camel .Name }}({{ cppParams "" .Params }});\n{{ end }}\n{{ end }}\n')),(0,n.kt)("h3",{id:"langdefault"},(0,n.kt)("strong",{parentName:"h3"},"{lang}Default")),(0,n.kt)("p",null,"Takes a typed element and returns default value"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{ range .Module.Interfaces }}\n{{ $class := .Name }}\n{{ range .Operations }}\n  {{ cppReturn "" .Return }} {{$class}}::{{ camel .Name }}({{ cppParams "" .Params }}) {\n    return {{ cppDefault "" .Return }};\n  }\n{{ end }}\n{{ end }}\n')),(0,n.kt)("h3",{id:"langvars"},(0,n.kt)("strong",{parentName:"h3"},"{lang}}Vars")),(0,n.kt)("p",null,"Takes a list of types and creates variable names for them"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{ cppVars "" .Properties }}\n')),(0,n.kt)("h3",{id:"langvar"},(0,n.kt)("strong",{parentName:"h3"},"{lang}Var")),(0,n.kt)("p",null,"Takes a typed element and creates a variable name for it"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{ cppVar "" .Property }}\n')),(0,n.kt)("h3",{id:"langtype"},(0,n.kt)("strong",{parentName:"h3"},"{lang}Type")),(0,n.kt)("p",null,"Takes a typed element and returns the type declaration of the type"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'{{ cppType "" .Property }}\n')),(0,n.kt)("h2",{id:"c14-filters"},"C++14 Filters"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"cppReturn"),": takes a typed element and returns the type declaration of the type"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"cppParam"),": takes a typed element and returns the function parameter declaration"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"cppParams"),": takes an operation and return the lists of function parameters"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"cppDefault"),": takes a typed element and returns default value"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"cppVars"),": takes a list of types and creates variable names for them"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"cppVar"),": takes a typed element and creates a variable name for it"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"cppType"),": takes a typed element and returns the type declaration of the type"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"cppConstType"),": takes a typed element and returns the type declaration of the type with const qualifier"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"cppNs"),": takes a symbol and returns the namespace declaration"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"cppNsOpen"),": takes a symbol and returns the namespace opening"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"cppNsClose"),": takes a symbol and returns the namespace closing"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"cppGpl"),": takes a symbol and returns the GPL license header")),(0,n.kt)("h2",{id:"go-filters"},"Go Filters"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"goReturn"),": takes a typed element and returns the type declaration of the type"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"goParam"),": takes a typed element and returns the function parameter declaration"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"goParams"),": takes an operation and return the lists of function parameters"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"goDefault"),": takes a typed element and returns default value"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"goVars"),": takes a list of types and creates variable names for them"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"goVar"),": takes a typed element and creates a variable name for it"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"goType"),": takes a typed element and returns the type declaration of the type")),(0,n.kt)("h2",{id:"typescript-filters"},"TypeScript Filters"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"tsReturn"),": takes a typed element and returns the type declaration of the type"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"tsParam"),": takes a typed element and returns the function parameter declaration"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"tsParams"),": takes an operation and return the lists of function parameters"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"tsDefault"),": takes a typed element and returns default value"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"tsVars"),": takes a list of types and creates variable names for them"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"tsVar"),": takes a typed element and creates a variable name for it"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"tsType"),": takes a typed element and returns the type declaration of the type")),(0,n.kt)("h2",{id:"qtc-filters"},"QtC++ Filters"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"qtReturn"),": takes a typed element and returns the type declaration of the type"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"qtParam"),": takes a typed element and returns the function parameter declaration"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"qtParams"),": takes an operation and return the lists of function parameters"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"qtDefault"),": takes a typed element and returns default value"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"qtVars"),": takes a list of types and creates variable names for them"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"qtVar"),": takes a typed element and creates a variable name for it"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"qtType"),": takes a typed element and returns the type declaration of the type")),(0,n.kt)("h2",{id:"python-filters"},"Python Filters"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"pyReturn"),": takes a typed element and returns the type declaration of the type"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"pyParam"),": takes a typed element and returns the function parameter declaration"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"pyParams"),": takes an operation and return the lists of function parameters"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"pyDefault"),": takes a typed element and returns default value"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"pyVars"),": takes a list of types and creates variable names for them"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"pyVar"),": takes a typed element and creates a variable name for it"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"pyType"),": takes a typed element and returns the type declaration of the type")),(0,n.kt)("h2",{id:"unreal-engine-filters"},"Unreal Engine Filters"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"ueReturn"),": takes a typed element and returns the type declaration of the type"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"ueParam"),": takes a typed element and returns the function parameter declaration"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"ueParams"),": takes an operation and return the lists of function parameters"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"ueDefault"),": takes a typed element and returns default value"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"ueVars"),": takes a list of types and creates variable names for them"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"ueVar"),": takes a typed element and creates a variable name for it"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"ueType"),": takes a typed element and returns the type declaration of the type"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"ueConstType"),": takes a typed element and returns the type declaration of the type with const qualifier")))}d.isMDXComponent=!0}}]);