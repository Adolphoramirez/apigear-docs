"use strict";(self.webpackChunkapigear=self.webpackChunkapigear||[]).push([[6176],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,f=p["".concat(i,".").concat(m)]||p[m]||u[m]||o;return n?r.createElement(f,s(s({ref:t},d),{},{components:n})):r.createElement(f,s({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[p]="string"==typeof e?e:a,s[1]=l;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5876:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:4},s="Python SDK Template",l={unversionedId:"sdk/python-sdk",id:"sdk/python-sdk",title:"Python SDK Template",description:"The Python template generates a python module based on the module name and exposes clean interfaces based on the module interface inside an API module. A core API which contain the single source of truth and a module code which is created as scaffolding code. For each interface a test file is also created.",source:"@site/docs/sdk/python-sdk.md",sourceDirName:"sdk",slug:"/sdk/python-sdk",permalink:"/docs/sdk/python-sdk",draft:!1,editUrl:"https://github.com/apigear-io/apigear-docs/edit/main/docs/sdk/python-sdk.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docsSidebar",previous:{title:"Qt C++ SDK Template",permalink:"/docs/sdk/qtcpp-sdk"},next:{title:"Golang SDK Template",permalink:"/docs/sdk/go-sdk"}},i={},c=[{value:"Interfaces",id:"interfaces",level:2},{value:"Data Structures",id:"data-structures",level:2},{value:"Enumerations",id:"enumerations",level:2}],d={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"python-sdk-template"},"Python SDK Template"),(0,a.kt)("p",null,"The Python template generates a python module based on the module name and exposes clean interfaces based on the module interface inside an API module. A core API which contain the single source of truth and a module code which is created as scaffolding code. For each interface a test file is also created."),(0,a.kt)("p",null,"The Python module allows to be extended and implemented based on the API core and inside the scaffolding files."),(0,a.kt)("p",null,"Following template feature switches are supported:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"API - Only creates the interface files for you"),(0,a.kt)("li",{parentName:"ul"},"Scaffold - Creates a full project with reference implementation and build system support.")),(0,a.kt)("p",null,"In the generated source code you will find a ",(0,a.kt)("inlineCode",{parentName:"p"},"README")," which explain in great detail how to build and use the code."),(0,a.kt)("h1",{id:"api"},"API"),(0,a.kt)("h2",{id:"interfaces"},"Interfaces"),(0,a.kt)("p",null,"An interface like this counter will be directly transformed to an abstract class."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"interfaces:\n  - name: Counter\n    properties:\n      - name: count\n        type: int\n    operations:\n      - name: increment\n")),(0,a.kt)("p",null,"The class will then later be used to be implemented by the customer."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"class ICounter:\n    @property\n    def count(self):\n        raise NotImplementedError\n\n    def increment(self):\n        raise NotImplementedError\n")),(0,a.kt)("h2",{id:"data-structures"},"Data Structures"),(0,a.kt)("p",null,"A data structure like this message which contains one field, called text is transformed into a class with public fields."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"structs:\n  - name: Message\n    fields:\n      - name: text\n        type: string\n")),(0,a.kt)("p",null,"A data structure is transformed to a python class. As these API structs shall be able to be used outside of the module the fields are public."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"class Message:\n    def __init__(self):\n        self.text : str = str()\n")),(0,a.kt)("h2",{id:"enumerations"},"Enumerations"),(0,a.kt)("p",null,"A enumeration will be transformed to a set of constants."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"enums:\n  - name: Direction\n    members:\n      - name: Up\n      - name: Down\n      - name: Left\n      - name: Right\n")),(0,a.kt)("p",null,"This is transformed to"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"from enum import Enum\n\nclass Direction(Enum):\n    Up = 0\n    Down = 1\n    Left = 2\n    Right = 3\n\n")))}p.isMDXComponent=!0}}]);