"use strict";(self.webpackChunkapigear=self.webpackChunkapigear||[]).push([[1533],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4266:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:3},i="Qt C++ SDK Template",s={unversionedId:"sdk/qtcpp-sdk",id:"sdk/qtcpp-sdk",title:"Qt C++ SDK Template",description:"The Qt C++ template generates a CMake based SDK to develop QtQuick plugins or C++ libraries. Each API module is transformed into an own C++ library and wrapped in a QtQuick plugin. This allows you to use and test the library independent from the QtQuick technology.",source:"@site/docs/sdk/qtcpp-sdk.md",sourceDirName:"sdk",slug:"/sdk/qtcpp-sdk",permalink:"/docs/sdk/qtcpp-sdk",draft:!1,editUrl:"https://github.com/apigear-io/apigear-docs/edit/main/docs/sdk/qtcpp-sdk.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docsSidebar",previous:{title:"C++ 14 SDK template",permalink:"/docs/sdk/cpp14-sdk"},next:{title:"Python SDK Template",permalink:"/docs/sdk/python-sdk"}},l={},c=[{value:"Interfaces",id:"interfaces",level:2},{value:"Data Structures",id:"data-structures",level:2},{value:"Enumerations",id:"enumerations",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"qt-c-sdk-template"},"Qt C++ SDK Template"),(0,a.kt)("p",null,"The Qt C++ template generates a CMake based SDK to develop QtQuick plugins or C++ libraries. Each API module is transformed into an own C++ library and wrapped in a QtQuick plugin. This allows you to use and test the library independent from the QtQuick technology."),(0,a.kt)("p",null,"The Qt C++ SDK also supports the use of the simulation backend. And the ApiGear analytics data center (experimental)."),(0,a.kt)("p",null,"Following template feature switches are supported:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Basic - Only creates the interface files for you"),(0,a.kt)("li",{parentName:"ul"},"Scaffold - Creates a full project with reference implementation and build system support.")),(0,a.kt)("p",null,"In the generated source code you will find a ",(0,a.kt)("inlineCode",{parentName:"p"},"README")," which explain in great detail how to build and use the code."),(0,a.kt)("h1",{id:"api"},"API"),(0,a.kt)("h2",{id:"interfaces"},"Interfaces"),(0,a.kt)("p",null,"An interface like this counter will be directly transformed to an abstract C++ class."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"interfaces:\n  - name: Counter\n    properties:\n      - name: count\n        type: int\n    operations:\n      - name: increment\n")),(0,a.kt)("p",null,"The class will then later be used to be implemented by the customer."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class AbstractCounter : public QObject {\n    Q_OBJECT\npublic:\n    AbstractCounter(QObject * parent=nullptr);\n    virtual void setCount(int count) = 0;\n    virtual int count() const = 0;\n    virtual void increment() = 0;\nQ_SIGNALS:\n    void countChanged(int count);\n};\n")),(0,a.kt)("h2",{id:"data-structures"},"Data Structures"),(0,a.kt)("p",null,"A data structure like this message which contains one field, called text is transformed into a C++ class with public fields."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"structs:\n  - name: Message\n    fields:\n      - name: text\n        type: string\n")),(0,a.kt)("p",null,"A data structure is transformed to a Qt C++ gadget so it can be also be used later in QML."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Message\n{\n    Q_GADGET\n    Q_PROPERTY(QString text READ text WRITE setText)\n\npublic:\n    Message();\n    void setText(const QString& text);\n    QString text() const;\n\n    bool operator==(const Message &other) const;\n    bool operator!=(const Message &other) const;\n\nprivate:\n    QString m_text;\n};\n\nQ_DECLARE_METATYPE(Message)\n")),(0,a.kt)("h2",{id:"enumerations"},"Enumerations"),(0,a.kt)("p",null,"A enumeration will be transformed to a standalone class with an enum embedded."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"enums:\n  - name: Direction\n    members:\n      - name: Up\n      - name: Down\n      - name: Left\n      - name: Right\n")),(0,a.kt)("p",null,"This is transformed to"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Direction : public QObject {\n    Q_OBJECT\npublic:\n    Direction(QObject *parent = nullptr)\n        : QObject(parent)\n        {}\n    enum DirectionEnum {\n        Up = 0,\n        Down = 1,\n        Left = 2,\n        Right = 3,\n    };\n    Q_ENUM(DirectionEnum)\n\n    static DirectionEnum toEnum(quint8 v, bool *ok);\n};\n")))}u.isMDXComponent=!0}}]);