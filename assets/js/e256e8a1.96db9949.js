"use strict";(self.webpackChunkapigear=self.webpackChunkapigear||[]).push([[4878],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),m=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=m(e.components);return o.createElement(s.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=m(n),d=a,f=c["".concat(s,".").concat(d)]||c[d]||p[d]||r;return n?o.createElement(f,i(i({ref:t},u),{},{components:n})):o.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var m=2;m<r;m++)i[m]=n[m];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1249:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>m});var o=n(7462),a=(n(7294),n(3905));const r={sidebar_position:4},i="API Simulation",l={unversionedId:"cli/simulate",id:"cli/simulate",title:"API Simulation",description:"API Simulation is a feature that allows you to simulate the behavior of an API. This is useful for testing, demonstration, and development. It decouples the interface implementation from the interface users.",source:"@site/docs/cli/simulate.md",sourceDirName:"cli",slug:"/cli/simulate",permalink:"/docs/cli/simulate",draft:!1,editUrl:"https://github.com/apigear-io/apigear-docs/edit/main/docs/cli/simulate.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docsSidebar",previous:{title:"API Monitoring",permalink:"/docs/cli/monitor"},next:{title:"SDK Templates",permalink:"/docs/cli/template"}},s={},m=[{value:"Quick API Simulation",id:"quick-api-simulation",level:2}],u={toc:m};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"api-simulation"},"API Simulation"),(0,a.kt)("p",null,"API Simulation is a feature that allows you to simulate the behavior of an API. This is useful for testing, demonstration, and development. It decouples the interface implementation from the interface users."),(0,a.kt)("h2",{id:"quick-api-simulation"},"Quick API Simulation"),(0,a.kt)("p",null,"API Simulation is a feature of the ApiGear platform. It allows to simulate the behavior of an API. The ",(0,a.kt)("inlineCode",{parentName:"p"},"apigear")," command line tool can be used to simulate an API. The following example shows how to simulate the demo API."),(0,a.kt)("p",null,"API simulation is based on a simulation scenario. The following example shows how to create a simulation scenario for the demo API."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"# demo.scenario.yaml\ninterfaces:\n  - name: demo.Counter\n    props:\n      count: 0\n    operations:\n      - name: increment\n        actions:\n          - $set: { count: 1 }\n      - name: decrement\n        actions:\n          - $set: { count: 0 }\n")),(0,a.kt)("p",null,"Now we can run the simulation server using the following command."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"apigear simulate run demo.scenario.yaml\n")),(0,a.kt)("p",null,"The simulation server will listen on port 5555. To change the port use the ",(0,a.kt)("inlineCode",{parentName:"p"},"--port")," option. It will load the simulation scenario from the ",(0,a.kt)("inlineCode",{parentName:"p"},"demo.scenario.yaml")," file. The simulation server will listen for API calls. Normally the API calls will come from a running API client. It is also possible to feed API calls using the ",(0,a.kt)("inlineCode",{parentName:"p"},"feed")," command."),(0,a.kt)("p",null,"The following example shows how to feed API calls to the simulation server using a new line delimited json document (",(0,a.kt)("inlineCode",{parentName:"p"},"NDJSON"),")."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{ "method": "simu.state", "params": { "symbol": "demo.Counter" }}\n{ "method": "simu.call", "params": { "symbol": "demo.Counter/increment", "data": { "step": 1 } }}\n{ "method": "simu.call", "params": { "symbol": "demo.Counter/decrement", "data": { "step": 2 } }}\n{ "method": "simu.state", "params": { "symbol": "demo.Counter", "data": { "count": 4 } }}\n{ "method": "simu.state", "params": { "symbol": "demo.Counter" }}\n')),(0,a.kt)("p",null,"To feed the API calls to the simulation server just run the following command."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"apigear simulate feed demo.ndjson\n")),(0,a.kt)("p",null,"This will send the API calls to the simulation server. The simulation server will print the API calls to the console."))}c.isMDXComponent=!0}}]);