(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{295:function(t,e,a){"use strict";a.r(e);var s=a(10),n=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"custom-templates"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#custom-templates"}},[t._v("#")]),t._v(" Custom Templates")]),t._v(" "),e("p",[t._v("ApiGear offers a large set of pre-made technology templates covering the major programming languages and technologies.\nBut often a project requires some adaptations to the templates or require support for a different technology which is not yet covered.")]),t._v(" "),e("p",[t._v("ApiGear was designed to allow customers easily to adapt the existing templates for the specifics of each customer project.")]),t._v(" "),e("p",[t._v("Customers can provide their own technology templates, either as open source or proprietary templates.")]),t._v(" "),e("p",[t._v("The process to adapt an existing template or to create a fresh new template is not really difficult and will be covered here.")]),t._v(" "),e("h2",{attrs:{id:"maker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#maker"}},[t._v("#")]),t._v(" Maker")]),t._v(" "),e("p",[t._v("A user which creates templates is called a maker. Normally is is possible to contribute to existing templates to enhance in an open discussion the quality for everyone. But often there is also a desire to solve a new problem or to create a project specific adaptation. In these cases it makes sense to fork a template or to create a new template.")]),t._v(" "),e("p",[t._v("templates allows you to solve all kind of API structured problems in a very easy way.")]),t._v(" "),e("h2",{attrs:{id:"creating-a-template"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-template"}},[t._v("#")]),t._v(" Creating a template")]),t._v(" "),e("p",[t._v("A template is a folder with a common structure consisting of a rules document, which controls the code generation process and the templates folder. The templates will be listed inside a rules document. Later a solution document will link the template with API modules for code generation.")]),t._v(" "),e("p",[t._v("Below is roughly the process to create and develop a template")]),t._v(" "),e("ul",[e("li",[t._v("Create a template folder with rules document and templates folder")]),t._v(" "),e("li",[t._v("Create an ApiGear Studio API project with a demo API")]),t._v(" "),e("li",[t._v("Add a solution to the API project to link API modules with the template")]),t._v(" "),e("li",[t._v("Edit the template and re-generate the output")])]),t._v(" "),e("p",[t._v("The templates are written using the "),e("a",{attrs:{href:"https://pkg.go.dev/text/template",target:"_blank",rel:"noopener noreferrer"}},[t._v("go-template"),e("OutboundLink")],1),t._v(" template language and each template should end with "),e("code",[t._v(".tpl")]),t._v(". ApiGear extends the template language by custom programming language specific filters to ease many complex tasks.")]),t._v(" "),e("p",[t._v("The Go-Template is used in several projects and is well documented. The ApiGear extensions are documented in the "),e("RouterLink",{attrs:{to:"/maker/filters.html"}},[t._v("Filters")]),t._v(" section.")],1),t._v(" "),e("h2",{attrs:{id:"your-first-template"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#your-first-template"}},[t._v("#")]),t._v(" Your first template")]),t._v(" "),e("p",[t._v("A typical template folder structure looks like this")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("first/\n    rules.yaml\n    templates/welcome.txt.tpl\n")])])]),e("p",[t._v("The rules document is a YAML document and lists all template file and how they shall be written inside the output folder. A simple rules document could look like this:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("features")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" default\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scopes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("match")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" system\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("documents")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("source")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" welcome.txt.tpl\n            "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("target")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" welcome.txt\n")])])]),e("p",[t._v("The first level (here "),e("code",[t._v("default")]),t._v(") defines a feature. This can be enabled or disabled using the feature settings for the code generator.\nThe next level (here "),e("code",[t._v("system")]),t._v(") defines to which symbol is shall be applied. A symbol is a defined location inside the API description.")]),t._v(" "),e("p",[t._v("Inside an API there exists the following symbols:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("system")]),t._v(": will be applied once for the root level system")]),t._v(" "),e("li",[e("code",[t._v("module")]),t._v(": will be applied for each module in the system")]),t._v(" "),e("li",[e("code",[t._v("interface")]),t._v(": will be is applied for each interface inside the module")]),t._v(" "),e("li",[e("code",[t._v("struct")]),t._v(": will be is applied for each struct inside the module")]),t._v(" "),e("li",[e("code",[t._v("enum")]),t._v(": will be is applied for each enum inside the module")])]),t._v(" "),e("p",[t._v("For each of these symbols inside the API description the target documents are written based on the source template.")]),t._v(" "),e("p",[t._v("You could think of the underlying logic of a rules document like this (using a python pseudo-code):")]),t._v(" "),e("div",{staticClass:"language-py extra-class"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[t._v("system "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nwrite_system_documents"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" module "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" system"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    write_module_documents"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" interface "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" module"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("interfaces"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        write_interface_documents"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" struct "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" module"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("structs"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        write_struct_documents"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" enum "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" module"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("enums"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        write_enum_documents"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Here is a more elaborate example of a rules document:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# rules.yaml")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("features")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" default\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scopes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("match")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" system\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("documents")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("source")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" system.md.tpl\n            "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("target")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" system.md\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("match")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" module\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("documents")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("source")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" module.md.tpl\n            "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("target")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(".Module.Name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(".md\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("match")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("interface")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("documents")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("source")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" interface.md.tpl\n            "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("target")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(".Interface.Name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(".md\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("match")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" struct\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("documents")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("source")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" struct.md.tpl\n            "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("target")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(".Struct.Name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(".md\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("match")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" enum\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("documents")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("source")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" enum.md.tpl\n            "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("target")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(".Enum.Name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(".md\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" summary\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scopes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("match")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" system\n        "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("documents")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("source")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" summary.md.tpl\n            "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("target")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" summary.md\n")])])]),e("p",[t._v("The "),e("code",{pre:!0},[t._v("{{ }}")]),t._v(" are a template expression. For example "),e("code",{pre:!0},[t._v("{{.Module.Name}}")]),t._v(" will be replaced with the content of module name. This allows you to write exactly these document names you require.")]),t._v(" "),e("p",[t._v("Additional to the template tags, the template engine also support filters. A filter is a function which takes a object and return a string. For example "),e("code",{pre:!0},[t._v("{{ lower .Module.Name }}")]),t._v(" or "),e("code",{pre:!0},[t._v("{{ .Module.Name | lower }}")]),t._v(" will lower case the module name. There are more filters in the in our filters documentation.")])])}),[],!1,null,null,null);e.default=n.exports}}]);